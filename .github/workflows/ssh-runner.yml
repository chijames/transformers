name: SSH into our runners

on:
  push: 
    branches:
      - ssh_send_dm
#  workflow_dispatch:
#    inputs:
#      runner_type:
#        description: 'Type of runner to test (a10 or t4)'
#        required: true
#      docker_image:
#        description: 'Name of the Docker image'
#        required: true
#      num_gpus:
#        description: 'Type of the number of gpus to use (`single` or `multi`)'
#        required: true


env:
  runner_type: a10
  docker_image: huggingface/transformers-all-latest-gpu
  num_gpus: single
  HF_HUB_READ_TOKEN: ${{ secrets.HF_HUB_READ_TOKEN }}
  HF_HOME: /mnt/cache 
  TRANSFORMERS_IS_CI: yes 
  OMP_NUM_THREADS: 8 
  MKL_NUM_THREADS: 8 
  RUN_SLOW: yes # For gated repositories, we still need to agree to share information on the Hub repo. page in order to get access. # This token is created under the bot `hf-transformers-bot`. 
  SIGOPT_API_TOKEN: ${{ secrets.SIGOPT_API_TOKEN }} 
  TF_FORCE_GPU_ALLOW_GROWTH: true 
  CUDA_VISIBLE_DEVICES: 0,1
  RUN_PT_TF_CROSS_TESTS: 1
  USER_GITHUB_SLACK_MAP: ${{ secrets.USER_GITHUB_SLACK_MAP }}

jobs:
  ssh_runner:
    name: "SSH"
    runs-on: ["single-gpu", nvidia-gpu, t4, ci]
    container:
      image: huggingface/transformers-all-latest-gpu
      options: --gpus all --privileged --ipc host -v /mnt/cache/.cache/huggingface:/mnt/cache/

    steps:
      - name: Update clone
        working-directory: /transformers
        run: |
          git fetch && git checkout ${{ github.sha }}

      - name: Cleanup
        working-directory: /transformers
        run: |
          rm -rf tests/__pycache__
          rm -rf tests/models/__pycache__
          rm -rf reports

      - name: Show installed libraries and their versions
        working-directory: /transformers
        run: pip freeze
      
      - name: NVIDIA-SMI
        run: |
          nvidia-smi

      - name: Check python file
        working-directory: /transformers
        run: |
          python3 check_env.py


      - name: Send SSH informations to Slack channel
        uses: slackapi/slack-github-action@6c661ce58804a1a20f6dc5fbee7f0381b469e001
        # not working
        if: fromJSON(secrets.USER_GITHUB_SLACK_MAP)['ydshieh'] != ''
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          # channel-id: ${{ secrets.MY_SLACK_ID }}
          # can't be empty
          channel-id: ${{ fromJSON(secrets.USER_GITHUB_SLACK_MAP)['ydshieh'] }}
          # For posting a rich message using Block Kit
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Hello",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "Hello"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "Hello"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "Hello"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "Hello"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Hello"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_CIFEEDBACK_BOT_TOKEN }}


#      - name: Tailscale # In order to be able to SSH when a test fails
#        uses: huggingface/tailscale-action@main
#        with:
#          authkey: ${{ secrets.TAILSCALE_SSH_AUTHKEY }}
#          slackChannel: ${{ secrets.SLACK_CIFEEDBACK_CHANNEL }}
#          slackToken: ${{ secrets.SLACK_CIFEEDBACK_BOT_TOKEN }}
#          waitForSSH: true
